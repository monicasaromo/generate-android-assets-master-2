// Generate Android assets from all slices in current page (shift cmd a)
// Assumes pixel count in Sketch is xxhdpi, so 1dp=3px
// Saves off all assets to path to current document + drawable-{mdpi,hdpi,xhdpi,xxhdpi,xxxhdpi}

var library = {}
library.sandbox = {
    // Utility: display a modal with message
    debug: function(message){
        var app = [NSApplication sharedApplication];
        [app displayDialog:message withTitle:"Hey"];
    },
    // each-like iterator for Obj-C types
    forEachObj: function(array, callback){
        var count = [array count];
        for (var i = 0; i < count; i++){
            var el = [array objectAtIndex: i];
            callback(el);
        }
    },
    openInFinder: function(path){
	var finder_task = [[NSTask alloc] init],
        open_finder_args = [NSArray arrayWithObjects:"-R", path, nil];

	[finder_task setLaunchPath:"/usr/bin/open"];
	[finder_task setArguments:open_finder_args];
	[finder_task launch];
    }
}

function main(){
    var fileUrl = [doc fileURL];
    if (fileUrl == null) {
		alert("You need to save your document for me to know where to save it");
		return;
    }

    var base_dir = get_dir_from_prompt(get_cwd());
    if (base_dir == null){
		alert("Not saving any assets");
		return;
    }

	//process the selected slices
    var slicesToOutput = selection;
    library.sandbox.forEachObj(slicesToOutput, function(slice){
		process_slice(slice, doc, base_dir);
    });

    library.sandbox.openInFinder(base_dir + "/drawable-hdpi");
}

function alert(msg){
    var app = [NSApplication sharedApplication];
    [app displayDialog:msg withTitle:"Hey"];
}

// Return current working directory
// This works better for the designer's workflow, as they mostly want to
// save assets in the current directory
function get_cwd(){
    var file_url = [doc fileURL],
    file_path = [file_url path],
    base_dir = file_path.split([doc displayName])[0];
    return base_dir;
}

// Let the user specify a directory
function get_dir_from_prompt(){
    var panel = [NSOpenPanel openPanel];
    [panel setMessage:"Where do you want to place your assets?"];
    [panel setCanChooseDirectories: true];
    [panel setCanChooseFiles: false];
	[panel setCanCreateDirectories: true];
    var default_dir = [[doc fileURL] URLByDeletingLastPathComponent];
    [panel setDirectoryURL:default_dir];


    if ([panel runModal] == NSOKButton){
	var message = [panel filename];
	return message;
    }
}

function process_slice(slice, doc, base_dir){
    var frame = [slice frame];
    var slice_name = [slice name];

    //Assuming xhdpi
    //var factors = [
	//["mdpi",0.5],
	//["hdpi", 0.75],
	//["xhdpi", 1],
	//["xxhdpi", 1.5],
	//["xxxhdpi", 2]];

    //Assuming xxhdpi
    var factors = [
    ["mdpi",0.33333333333],
    ["hdpi", 0.5],
    ["xhdpi", 0.66666666666],
    ["xxhdpi", 1],
    ["xxxhdpi", 1.33333333333]];

    for (var i = 0; i < factors.length; i++){
	var factor = factors[i][1];
	var name = factors[i][0];
	log("Processing " + slice_name + " " + name + " (" + factor + ")");
	var version = copy_layer_with_factor(slice, factor);
	var file_name = base_dir + "/drawable-" + name + "/" + slice_name + ".png";
	[doc saveArtboardOrSlice: version toFile:file_name];
	log("Saved " + file_name);
    }
}

function copy_layer_with_factor(original_slice, factor){
    var copy = [original_slice duplicate];
    var frame = [copy frame];

    var rect = [copy rectByAccountingForStyleSize:[[copy absoluteRect] rect]],
    slice = [MSExportRequest requestWithRect:rect scale:factor];
    [copy removeFromParent];
    return slice;
}


main();
